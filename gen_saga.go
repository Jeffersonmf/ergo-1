package ergo

import (
	"fmt"

	"github.com/halturin/ergo/etf"
)

type GenSaga struct {
	GenServer
}

type GenSagaTransactionOptions struct {
	// Name defines the name of this transaction. By default
	// this name has autogenerated ID.
	Name string
	// IgnoreLoop whether to cancel the transaction if a loop was detected.
	// Default is false.
	IgnoreLoop bool
	// HopLimit defines a number of hop within the transaction. Default limit
	// is 0 (no limit).
	HopLimit uint
}

type GenSagaOptions struct {
	// MaxTransactions defines the limit for the number of active transactions. Default: 0 (unlimited)
	MaxTransactions uint
}

type GenSagaState struct {
	GenServerState
	Options GenSagaOptions
	txs     map[string]GenSagaTransaction
}

type GenSagaTransaction struct {
	Options GenSagaTransactionOptions
	Name    string
	Ref     etf.Ref
	parents []etf.Pid
}

type sagaMessage struct {
	Request string
	Command interface{}
}

type sagaMessageNext struct {
	Transaction GenSagaTransaction
	Args        []interface{}
}

type sagaMessageResult struct {
	Transaction GenSagaTransaction
	Result      interface{}
}

type sagaMessageCancel struct {
	Transaction GenSagaTransaction
	Reason      string
}

// GenSagaBehavior interface
type GenSagaBehavior interface {
	//
	// Mandatory callbacks
	//

	// InitSaga
	InitSaga(state *GenSagaState, args ...interface{}) error

	// HandleCancel invoked on a request of transaction cancelation.
	HandleCancel(state *GenSagaState, tx GenSagaTransaction) error

	// HandleCanceled invoked if the given transaction has been canceled by some
	// reason (node or process went down or by explicit cancelation).
	HandleCanceled(state *GenSagaState, tx GenSagaTransaction, reason string) error

	// HandleResult
	HandleResult(state *GenSagaState, tx GenSagaTransaction, result interface{}) error

	// HandleTimeout
	HandleTimeout(state *GenSagaState, tx GenSagaTransaction, timeout int) error

	//
	// Optional callbacks
	//

	HandleNext(state *GenSagaState, tx GenSagaTransaction, args ...interface{}) error
	HandleInterim(state *GenSagaState, tx GenSagaTransaction, interim interface{}) error

	// HandleGenStageCall this callback is invoked on Process.Call. This method is optional
	// for the implementation
	HandleGenSagaCall(state *GenSagaState, from GenServerFrom, message etf.Term) (string, etf.Term)
	// HandleGenStageCast this callback is invoked on Process.Cast. This method is optional
	// for the implementation
	HandleGenSagaCast(state *GenSagaState, message etf.Term) string
	// HandleGenStageInfo this callback is invoked on Process.Send. This method is optional
	// for the implementation
	HandleGenSagaInfo(state *GenSagaState, message etf.Term) string
}

// default GenSaga callbacks

func (gs *GenSaga) HandleNext(state *GenSagaState, tx GenSagaTransaction, arg interface{}) error {
	fmt.Printf("HandleNext: unhandled message %#v\n", tx)
	return nil
}
func (gs *GenSaga) HandleCanceled(state *GenSagaState, tx GenSagaTransaction, reason string) error {
	// default callback if it wasn't implemented
	return nil
}
func (gs *GenSaga) HandleInterim(state *GenSagaState, tx GenSagaTransaction, interim interface{}) error {
	// default callback if it wasn't implemented
	fmt.Printf("HandleInterim: unhandled message %#v\n", tx)
	return nil
}

func (gs *GenSaga) HandleGenSagaCall(state *GenSagaState, from GenServerFrom, message etf.Term) (string, etf.Term) {
	// default callback if it wasn't implemented
	fmt.Printf("HandleGenSagaCall: unhandled message (from %#v) %#v\n", from, message)
	return "reply", etf.Atom("ok")
}

func (gs *GenSaga) HandleGenSagaCast(state *GenSagaState, message etf.Term) string {
	// default callback if it wasn't implemented
	fmt.Printf("HandleGenSagaCast: unhandled message %#v\n", message)
	return "noreply"
}
func (gs *GenSaga) HandleGenSagaInfo(state *GenSagaState, message etf.Term) string {
	// default callback if it wasn't implemnted
	fmt.Printf("HandleGenSagaInfo: unhandled message %#v\n", message)
	return "noreply"
}

//
// GenServer callbacks
//
func (gs *GenSaga) Init(state *GenServerState, args ...interface{}) error {
	sagaState := &GenSagaState{
		GenServerState: *state,
	}
	if err := state.Process.GetObject().(GenSagaBehavior).InitSaga(sagaState, args...); err != nil {
		return err
	}
	state.State = sagaState
	return nil
}

func (gs *GenSaga) HandleCall(state *GenServerState, from GenServerFrom, message etf.Term) (string, etf.Term) {
	return "reply", "ok"
}

func (gs *GenSaga) HandleCast(state *GenServerState, message etf.Term) string {
	st := state.State.(*GenSagaState)
	reply := state.Process.GetObject().(GenSagaBehavior).HandleGenSagaCast(st, message)
	return reply
}

func (gs *GenSaga) HandleInfo(state *GenServerState, message etf.Term) string {
	var d DownMessage
	var m sagaMessage

	st := state.State.(*GenSagaState)
	// check if we got a 'DOWN' message
	// {DOWN, Ref, process, PidOrName, Reason}
	if isDown, d := IsDownMessage(message); isDown {
		if err := handleSagaDown(st, d); err != nil {
			return err.Error()
		}
		return "noreply"
	}

	if err := etf.TermIntoStruct(message, &m); err != nil {
		reply := state.Process.GetObject().(GenSagaBehavior).HandleGenSagaInfo(st, message)
		return reply
	}
	err := handleSagaRequest(st, m)
	switch err {
	case nil:
		return "noreply"
	case ErrStop:
		return "stop"
	case ErrUnsupportedRequest:
		reply := state.Process.GetObject().(GenSagaBehavior).HandleGenSagaInfo(st, message)
		return reply
	default:
		return err.Error()
	}
}

func handleSagaRequest(state *GenSagaState, m sagaMessage) error {
	var next sagaMessageNext
	var cancel sagaMessageCancel
	var result sagaMessageResult

	switch m.request {
	case "$saga_next":
		if err := etf.TermIntoStruct(m.Command, &next); err != nil {
			return ErrUnsupportedRequest
		}
		state.Process.GetObject().(GenSagaBehavior).HandleNext(state, next.Transaction, next.Args...)
		return nil
	case "$saga_cancel":
		if err := etf.TermIntoStruct(m.Command, &cancel); err != nil {
			return ErrUnsupportedRequest
		}
		state.Process.GetObject().(GenSagaBehavior).HandleCancel(state, cancel.Transaction, cancel.Reason)
		return nil
	case "$saga_interim":
		if err := etf.TermIntoStruct(m.Command, &result); err != nil {
			return ErrUnsupportedRequest
		}
		state.Process.GetObject().(GenSagaBehavior).HandleInterim(state, result.Transaction, result.Result)
		return nil
	case "$saga_result":
		if err := etf.TermIntoStruct(m.Command, &result); err != nil {
			return ErrUnsupportedRequest
		}
		state.Process.GetObject().(GenSagaBehavior).HandleResult(state, result.Transaction, result.Result)
		return nil
	}
	return ErrUnsupportedRequest
}
func handleSagaDown(state *GenSagaState, down DownMessage) error {
	return nil
}
